// AUTOGENERATED FILE
// This file was generated from range.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode,
} from "ohm-js";

export interface RangeActionDict<T> extends BaseActionDict<T> {
  Exp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Range_multiply?: (
    this: NonterminalNode,
    arg0: NonterminalNode,
    arg1: TerminalNode,
    arg2: NonterminalNode
  ) => T;
  Range_divide?: (
    this: NonterminalNode,
    arg0: NonterminalNode,
    arg1: TerminalNode,
    arg2: NonterminalNode
  ) => T;
  Range?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  RangeValue?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Strength?: (this: NonterminalNode, arg0: TerminalNode) => T;
  Number_negative?: (
    this: NonterminalNode,
    arg0: TerminalNode,
    arg1: NonterminalNode
  ) => T;
  Number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  PositiveNumber_float?: (
    this: NonterminalNode,
    arg0: IterationNode,
    arg1: TerminalNode,
    arg2: IterationNode
  ) => T;
  PositiveNumber_int?: (this: NonterminalNode, arg0: IterationNode) => T;
  PositiveNumber?: (this: NonterminalNode, arg0: NonterminalNode) => T;
}

export interface RangeSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: RangeActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: RangeActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: RangeActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: RangeActionDict<T>): this;
}

export interface RangeGrammar extends Grammar {
  createSemantics(): RangeSemantics;
  extendSemantics(superSemantics: RangeSemantics): RangeSemantics;
}

declare const grammar: RangeGrammar;
export default grammar;
